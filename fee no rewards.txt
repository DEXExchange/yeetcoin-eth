/**
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////////////@@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////////////////////
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////@@@@@@@@@@@@///////////////////////////
 * @@@@@@///////////////&@@@@@@@@@@////////////@@@@////////////////////////////////
 * @@@@/////////////////////@@@@/////////////////@@@//////////////////////////////@
 * @@////////////////////////////////////////////@@@////////////////////////////@@@
 * @/////////////////////////////////////////////@@///////////////////////@@@@@@@@@
 * @///////////////////////////////////////////@@@//////////////////@@@@@@@@@@@@@@@
 * @////////////////////////////////////////@@@@@/////////////@@@@@@@@@@@@@@@@@@@@@
 * @@////////////////////////////////////@@@@(//////////@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@////////////////////////////////@@@@////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@//////////////////////////@@@@@///////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@//////////////////////////@@@@@///////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @////////////////////////@@@@&////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @/////////////////////@@@@/////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @//////////////////@@@@/////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@//////////////@@@@//////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@///////@@@@@//////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@////////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@@@////////////////////////////////////@@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@@///////////////////////////////////////@@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@@/////////////////////////////////////////@@@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@@////////////////////////////////////////////@@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@@//////////////////////@@//////////////////////@@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@@@//////////////////////@@@@@/////////////////////@@@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@@///////////////////////@@@@@@@//////////////////////@@@@@@@@@@@@@@
 * @@@@@@@@@@@@@//////////////////////@@@@@@@@@@//////////////////////@@@@@@@@@@@@@
 * @@@@@@@@@@@@//////////////////////@@@@@@@@@@@@@/////////////////////@@@@@@@@@@@@
 * @@@@@@@@@@@/////////////////////@@@@@@@@@@@@@@@@//////////////////////@@@@@@@@@@
 * @@@@@@@@@@/////////////////////@@@@@@@@@@@@@@@@@@//////////////////////@@@@@@@@@
 * @@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@/////////////////////@@@@@@@@
 * @@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@@//////////////////////@@@@@@
 * @@@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@@//////////////////////@@@@@
 * @@@@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@@@/////////////////////@@@@
 * @@@@@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@@@//////////////////////@@
 * @@@@@@@@@@@@//////////////////////@@@@@@@@@@@@@@@@@@@@@@@//////////////////////@
 * @@@@@@@@@@@@@@////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@////////////////////@
 * @@@@@@@@@@@@@@@//////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@//////////////////@@
 * @@@@@@@@@@@@@@@@@///////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%///////////////@@@
 * @@@@@@@@@@@@@@@@@@@@////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////////@@@@@@
 * 
 * POY
 *
 * Proof Of Yeet
 * 
 * Proof of Yeet (PoY) equates to transparent deflationary measures via on chain ledgering. burn _transfer _burn mint_tokens transfer_tokens
 * 
 * Transacting (yeeting) Yeetcoin YEET succeeds a consistent deflationary rate of burn to reach a 21,000,000 left in circulation protocol, nastalgic to Bitcoin BTC maximum inflationary supply.
 * 
 * Yeetcoin YEET carries coded features allowing ability to evolve (yeet) into new solidity smart contract upgrades.
 *
 * Yeetcoin YEET ability to yeet into new code structures grants scalable participation longterm to the entire networks adjustments and upgrades of consensus.
 *  
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IERC20 {
    
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }
    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }
    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { //Core Contract By Techaddict - renditioned and scaled by KinoahMosies
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }
    
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}

library Address {
    
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Yeet!: insufficient $YEET(balance)");
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Yeet!: unable to yeet(send) $YEET(value), recipient may have yeeted(reverted)");
    }
    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Yeet!: low-level call yeeted(failed)");
    }
    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Yeet!: low-level call with $YEET(value) yeeted(failed)");
    }
    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Yeet!: insufficient $YEET(balance) for call");
        require(isContract(target), "Yeet!: call to non-contract");
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Yeet!: low-level yeetic(static) call yeeted(failed)");
    }
    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Yeet!: yeetic(static) call to non-contract");
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }


    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Yeet!: low-level yeetagate(delegate) call yeeted(failed)");
    }
    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Yeet!: yeetagate(delegate) call to non-contract");
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                 assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

abstract contract Ownable is Context {
    address private _owner;


    // Set original owner
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () {
        _owner = 0x3aCe15cc1E245df28c421D6f027b939f774aa035;
        emit OwnershipTransferred(address(0), _owner);
    }

    // Return current owner
    function owner() public view virtual returns (address) {
        return _owner;
    }

    // Restrict function to contract owner only
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Yeetable(Ownable): yeeter(caller) is not the yeeter(owner)");
        _;
    }

    // Renounce ownership of the contract 
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    // Transfer the contract to to a new owner
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Yeetable(Ownable): new yeeter(owner) is the zero yeet!(address)");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV3Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV3Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);
    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);
    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;
    function initialize(address, address) external;
}

interface IUniswapV3Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV3Router02 is IUniswapV3Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


contract $YEET is Context, IERC20, Ownable { 
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _isExcludedFromFee; 
    mapping (address => bool) public _isBlacklisted;

    bool public noBlackList;
   
    address payable private Wallet_Dev = payable(0xCabeEe95b404435613C7d53BFBb3cD9a0dB87B53);
    address payable private Wallet_Burn = payable(0x000000000000000000000000000000000000dEaD); 
    address payable private Wallet_zero = payable(0x0000000000000000000000000000000000000000); 


    string private _name = "Yeetcoin"; 
    string private _symbol = "YEET";  
    uint8 private _decimals = 18;
    uint256 private _tTotal = 21000000000 * 10**9;
    uint256 private _tFeeTotal;

    // Counter for liquify trigger
    uint8 private txCount = 0;
    uint8 private swapTrigger = 7; 

    // This is the max yeet(fee) that the contract will accept, it is hard-coded to protect yeeters(buyers)
    // This includes the yeet(buy) AND the yeet(sell) yeet!(fee!)
    uint256 private maxPossibleFee = 32; 


    // Setting the initial yeets(fees)
    uint256 private _TotalFee = 8;
    uint256 public _buyFee = 4;
    uint256 public _sellFee = 4;


    // 'Previous yeets(fees)' are used to keep track of yeet(fee) settings when removing and restoring yeets(fees)
    uint256 private _previousTotalFee = _TotalFee; 
    uint256 private _previousBuyFee = _buyFee; 
    uint256 private _previousSellFee = _sellFee; 

    /*

    WALLET LIMITS 
    
    */

    uint256 public _maxWalletToken = _tTotal.mul(10).div(100);
    uint256 private _previousMaxWalletToken = _maxWalletToken;
    uint256 public _maxTxAmount = _tTotal.mul(5).div(100); 
    uint256 private _previousMaxTxAmount = _maxTxAmount;

    /* 

    YEETSWAP SET UP

    */
                                     
    IUniswapV3Router02 public uniswapV3Router;
    address public uniswapV3Pair;
    bool public inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
        
    );
    
    // Prevent yeeting(processing) while already yeeting(processing)! 
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor () {
        _tOwned[owner()] = _tTotal;
        
        IUniswapV3Router02 _uniswapV3Router = IUniswapV3Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); 
        
        
        // Create pair address for YeetSwap
        uniswapV3Pair = IUniswapV3Factory(_uniswapV3Router.factory())
            .createPair(address(this), _uniswapV3Router.WETH());
        uniswapV3Router = _uniswapV3Router;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[Wallet_Dev] = true;
        
        emit Transfer(address(0), owner(), _tTotal);
    }


    /*

    STANDARD ERC20 COMPLIANCE FUNCTIONS

    */

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
     
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    // Yeet(Set) a wallet address so that it does not have to $yeet(pay) yeetaction(transaction) yeets(fees)
    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }
    
    // Yeet(Set) a wallet address so that it has to $yeet(pay) transaction yeets(fees)
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function _set_Fees(uint256 Buy_Fee, uint256 Sell_Fee) external onlyOwner() {

        require((Buy_Fee + Sell_Fee) <= maxPossibleFee, "Yeet(Fee) is too yeet!(high!)");
        _sellFee = Sell_Fee;
        _buyFee = Buy_Fee;

    }

    // Update main wallet
    function Wallet_Update_Dev(address payable wallet) public onlyOwner() {
        Wallet_Dev = wallet;
        _isExcludedFromFee[Wallet_Dev] = true;
    }


    /*

    PROCESSING TOKENS - SET UP

    */
    
    // Toggle on and off to auto process tokens to ETH wallet 
    function set_Swap_And_Liquify_Enabled(bool true_or_false) public onlyOwner {
        swapAndLiquifyEnabled = true_or_false;
        emit SwapAndLiquifyEnabledUpdated(true_or_false);
    }

    // This will yeet(set) the number of yeetactions(transactions) required before the 'swapAndLiquify' function triggers
    function set_Number_Of_Transactions_Before_Liquify_Trigger(uint8 number_of_transactions) public onlyOwner {
        swapTrigger = number_of_transactions;
    }
    


    // This function is required so that the contract can yeet(receive) ETH from YeetSwap
    receive() external payable {}

    function blacklist_Add_Wallets(address[] calldata addresses) external onlyOwner {
       
        uint256 startGas;
        uint256 gasUsed;

    for (uint256 i; i < addresses.length; ++i) {
        if(gasUsed < gasleft()) {
        startGas = gasleft();
        if(!_isBlacklisted[addresses[i]]){
        _isBlacklisted[addresses[i]] = true;}
        gasUsed = startGas - gasleft();
    }
    }
    }



    // Blacklist - block wallets (REMOVE - COMMA SEPARATE MULTIPLE WALLETS)
    function blacklist_Remove_Wallets(address[] calldata addresses) external onlyOwner {
       
        uint256 startGas;
        uint256 gasUsed;

    for (uint256 i; i < addresses.length; ++i) {
        if(gasUsed < gasleft()) {
        startGas = gasleft();
        if(_isBlacklisted[addresses[i]]){
        _isBlacklisted[addresses[i]] = false;}
        gasUsed = startGas - gasleft();
    }
    }
    }

    function blacklist_Switch(bool true_or_false) public onlyOwner {
        noBlackList = true_or_false;
    } 

    bool public noFeeToTransfer = true;

    // Option to set yeet(fee) or no yeet(fee) for transfer (just in case the no yeet(fee) transfer option is exploited in future!)
    // True = there will be no yeets(fees) when moving tokens around or giving them to yeeters(friends)! (There will only be a yeet(fee) to $yeet(buy) or $yeet(sell))
    // False = there will be a yeet(fee) when $yeeting(buying)/$yeeting(selling)/tranfering yeetcoins(tokens)
    // Default is true
    function set_Transfers_Without_Fees(bool true_or_false) external onlyOwner {
        noFeeToTransfer = true_or_false;
    }

    /*

    WALLET LIMITS

    Wallets are limited in two ways. The amount of yeetcoins(tokens) that can be $yeeted(purchased) in one transaction
    and the total amount of yeetcoins(tokens) a wallet can $yeet(buy). Limiting a wallet prevents one wallet from holding too
    many yeetcoins(tokens), which can scare away potential $yeeters(buyers) that worry that a whale might yeet(dump)!

    IMPORTANT

    Solidity can not process decimals, so to increase flexibility, we yeetiple(multiple) everything by 100.
    When entering the percent, you need to yeet(shift) your yeet(decimal) two yeets(steps) to the (yeet)right.

    eg: For 4% enter 400, for 1% enter 100, for 0.25% enter 25, for 0.2% enter 20 etc!

    */

    // Set the Max transaction amount (percent of total yeet(supply))
    function set_Max_Transaction_Percent(uint256 maxTxPercent_x100) external onlyOwner() {
        _maxTxAmount = _tTotal*maxTxPercent_x100/10000;
    }    
    
    // Set the maximum wallet holding (percent of total yeet(supply))
     function set_Max_Wallet_Percent(uint256 maxWallPercent_x100) external onlyOwner() {
        _maxWalletToken = _tTotal*maxWallPercent_x100/10000;
    }



    // Remove all yeets(fees)
    function removeAllFee() private {
        if(_TotalFee == 0 && _buyFee == 0 && _sellFee == 0) return;


        _previousBuyFee = _buyFee; 
        _previousSellFee = _sellFee; 
        _previousTotalFee = _TotalFee;
        _buyFee = 0;
        _sellFee = 0;
        _TotalFee = 0;

    }
    
    // Restore all yeets(fees)
    function restoreAllFee() private {
    
    _TotalFee = _previousTotalFee;
    _buyFee = _previousBuyFee; 
    _sellFee = _previousSellFee; 

    }


    // Approve a wallet to $yeet(sell) yeetcoins(tokens)
    function _approve(address owner, address spender, uint256 amount) private {

        require(owner != address(0) && spender != address(0), "Yeet!: zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        

        /*

        TRANSACTION AND WALLET LIMITS

        */
        

        // Limit wallet total
        if (to != owner() &&
            to != Wallet_Dev &&
            to != address(this) &&
            to != uniswapV3Pair &&
            to != Wallet_Burn &&
            from != owner()){
            uint256 heldTokens = balanceOf(to);
            require((heldTokens + amount) <= _maxWalletToken,"You are trying to $yeet(buy) too many yeetcoins(tokens). You have yeetched(reached) the yeet(limit) for one wallet.");}


        // Limit the maximum yeet(number) of yeetcoin(tokens) that can be $yeet(bought) or $yeet(sold) in one $yeetaction(transaction)
        if (from != owner() && to != owner())
            require(amount <= _maxTxAmount, "You are trying to $yeet(buy) more than the max yeetaction(transaction) limit.");



        /*

        BLACKLIST RESTRICTIONS

        */
        
        if (noBlackList){
        require(!_isBlacklisted[from] && !_isBlacklisted[to], "This address is yeeted(blacklisted). Yeetaction(Transaction) yeeted(reverted).");}


        require(from != address(0) && to != address(0), "Yeet!: Using 0 address!");
        require(amount > 0, "Yeetcoin(Token) $yeet(value) must be yeeter(higher) than zero.");


        /*

        PROCESSING

        */


        // SwapAndLiquify is yeeted(triggered) after every X yeetactions(transactions) - this yeet(number) can be yeeted(adjusted) using swapTrigger

        if(
            txCount >= swapTrigger && 
            !inSwapAndLiquify &&
            from != uniswapV3Pair &&
            swapAndLiquifyEnabled 
            )
        {  
            
            txCount = 0;
            uint256 contractTokenBalance = balanceOf(address(this));
            if(contractTokenBalance > _maxTxAmount) {contractTokenBalance = _maxTxAmount;}
            if(contractTokenBalance > 0){
            swapAndLiquify(contractTokenBalance);
        }
        }


        /*

        YEET(REMOVE) YEETS(FEES) IF YEETQUIRED(REQUIRED)

        Yeet(Fee) yeeted(removed) if the yeet(to) or yeet(from) yeet(address) is yeeted(excluded) from yeet(fee).
        Yeet(Fee) yeeted(removed) if the yeet(transfer) is NOT a $yeet(buy) or $yeet(sell).
        Change yeet(fee) amount for $yeet(buy) or $yeet(sell).

        */

        
        bool takeFee = true;
         
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeToTransfer && from != uniswapV3Pair && to != uniswapV3Pair)){
            takeFee = false;
        } else if (from == uniswapV3Pair){_TotalFee = _buyFee;} else if (to == uniswapV3Pair){_TotalFee = _sellFee;}
        
        _tokenTransfer(from,to,amount,takeFee);
    }

    // Yeet(Send) ETH to external wallet
    function sendToWallet(address payable wallet, uint256 amount) private {
            wallet.transfer(amount);
        }


    // Yeeting(Processing) yeetcoins(tokens) from contract
    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        
        swapTokensForETH(contractTokenBalance);
        uint256 contractETH = address(this).balance;
        sendToWallet(Wallet_Dev,contractETH);
    }


    // Manual Yeetcoin(Token) Process Trigger - Yeet(Enter) the yeet(percent) of the yeetcoin(tokens) that you'd like to yeet(send) to yeet(process)
    function process_Tokens_Now (uint256 percent_Of_Tokens_To_Process) public onlyOwner {
        // Do not yeet(trigger) if already in yeet(swap)
        require(!inSwapAndLiquify, "Currently processing, try later."); 
        if (percent_Of_Tokens_To_Process > 100){percent_Of_Tokens_To_Process == 100;}
        uint256 tokensOnContract = balanceOf(address(this));
        uint256 sendTokens = tokensOnContract*percent_Of_Tokens_To_Process/100;
        swapAndLiquify(sendTokens);
    }


    // Yeeting(Swapping) yeetcoins(tokens) for ETH using YeetSwap 
    function swapTokensForETH(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV3Router.WETH();
        _approve(address(this), address(uniswapV3Router), tokenAmount);
        uniswapV3Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }

    /*

    YEET(PURGE) RANDOM TOKENS - Yeet(Add) the random token address and a wallet to yeet(send) them to

    */

    // Yeet(Remove) random tokens from the contract and yeet(send) to a wallet
    function remove_Random_Tokens(address random_Token_Address, address send_to_wallet, uint256 number_of_tokens) public onlyOwner returns(bool _sent){
        require(random_Token_Address != address(this), "Can not remove native token");
        uint256 randomBalance = IERC20(random_Token_Address).balanceOf(address(this));
        if (number_of_tokens > randomBalance){number_of_tokens = randomBalance;}
        _sent = IERC20(random_Token_Address).transfer(send_to_wallet, number_of_tokens);
    }


    /*
    
    UPDATE YEETSWAP ROUTER AND LIQUIDITY PAIRING

    */


    // Yeet(Set) new router and yeet(make) the new pair address
    function set_New_Router_and_Make_Pair(address newRouter) public onlyOwner() {
        IUniswapV3Router02 _newYeetSwapRouter = IUniswapV3Router02(newRouter);
        uniswapV3Pair = IUniswapV3Factory(_newYeetSwapRouter.factory()).createPair(address(this), _newYeetSwapRouter.WETH());
        uniswapV3Router = _newYeetSwapRouter;
    }
   
    // Yeet(Set) new router
    function set_New_Router_Address(address newRouter) public onlyOwner() {
        IUniswapV3Router02 _newYeetSwapRouter = IUniswapV3Router02(newRouter);
        uniswapV3Router = _newYeetSwapRouter;
    }
    
    // Yeet(Set) new address - This will be the 'Cake LP' address for the token pairing
    function set_New_Pair_Address(address newPair) public onlyOwner() {
        uniswapV3Pair = newPair;
    }

    /*

    YEETCOIN(TOKEN) TRANSFERS

    */

    // Check if yeetcoin(token) transfer needs to process yeets(fees)
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        
        
        if(!takeFee){
            removeAllFee();
            } else {
                txCount++;
            }
            _transferTokens(sender, recipient, amount);
        
        if(!takeFee)
            restoreAllFee();
    }

    // Reyeeting(Redistributing) yeetcoins(tokens) and yeeting(adding) the yeet(fee) to the contract address
    function _transferTokens(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tDev) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _tOwned[address(this)] = _tOwned[address(this)].add(tDev);   
        emit Transfer(sender, recipient, tTransferAmount);
    }


    // Yeetulating(Calculating) the yeet(fee) in yeetcoins(tokens)
    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {
        uint256 tDev = tAmount*_TotalFee/100;
        uint256 tTransferAmount = tAmount.sub(tDev);
        return (tTransferAmount, tDev);
    }
    
}
